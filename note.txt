git init
git add .
git commit -m "[notes]"

//// Create repository pon Github

* to use .env in mongodb, install - npm i dotenv
* app.use(express.json()); allows json as input for the BACKEND
* npm i bcryptjs
* authenticate users with jwt(npm i jsonwebtoken)

SECTIONS
1. INSTALL REACT AND TAILWIND CSS (PROJECT SETUP) 
2. CREATE PAGES AND ROUTES
3. CREATE HEADER COOMPONENT
4. CREATE SERVER (BACKEND)
5. CONNECT TO DATABASE (BACKEND)
6. CREATE USER MODEL (BACKEND)
7. CREATE A TEST API ROUTE (BACKEND)
8. CREATE SIGN UP ROUTE (BACKEND)
9. ADD MIDDLEWARE AND ERROR HANDLING FUNCTION
10. CREATE SIGN UP PAGE UI AND CONNECT TO DATABASE
11. ADD FUNCTIONALITY TO THE SIGN UP PAGE
12. CREATE FOOTER COMPONENT
13. CREATE SIGN IN ROUTE (BACKEND)
14. COMPLETE SIGN IN FUNCTIONALITY
15. ADD REDUX TOOLKIT
16. ADD REDUX PERSIST
17. ADD GOOGLE OAUTH FUNCTIONALITY (FIREBASE)
18. UPDATE GOOGLE HEADER WITH USER DATA
19. COMPLETE DARK MODE FUNCTIONALITY
20. MAKE DASHBOARD PRIVATE
21. ADD SIDEBAR TO DASHBOARD
22. CREATE PROFILE PAGE UI
23 UPLOAAD IMAGE FUNCTIONALITY (FIREBASE STORAGE)
24. CREATE UPDATE USER API ROUTE
* create the verifyUser MIDDLEWARE to verify the access_token
* app.use(cookieParser()); - to use cookie in backend
38. COMPLETE UPDATE USER PROFILE FUNCTIONALITY
39. ADD DELETE USER API ROUTE
40. COMPLETE DELETE USER FUNCTIONALITY
41. ADD SIGN OUT FUNCTIONALITY
42. ADD ADMIN FUNCTIONALITY TO USER
43. COMPLETE CREATE POST PAGE UI
44. ADD CREATE POST API ROUTE
45. COMPLETE CREATE POST UPLOAD IMAGE FUNCTIONALITY
46. COMPLETE CREATE POST PAGE FUNCTIONALITY (publish)
47. ADD POSTS SECTION TO DASHBOARD 
48. CREATE GET POSTS API ROUTE
49. SHOW USER POSTS IN DASHBOARD

SORTING
const points = [40, 100, 1, 5, 25, 10];
  points.sort(function (a, b) {
    return a - b;
  });
  console.log(points);
function(a, b){return a - b}
Negative Value ( a < b) => a will be placed before b
zero value (a == b) => No Change
Positive Value (a > b ) => a will be placed after b